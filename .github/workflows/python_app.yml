name: 3-Tier-python-postgres-app

on:
  push:
    branches: [ "main" ] 

permissions:
  contents: read
  id-token: write  # Needed for OIDC AWS role assumption

jobs:
  code_build:
    name: build 
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  security_checks:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code_build
    
    steps:
      - name: Lint with flake8
        run: |
          pip install flake8  
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security scan with Bandit
        run: |
          pip install bandit
          bandit -r . --exit-zero

      - name: Trivy Install & FS scan
        run: |
          sudo apt-get install -y wget gnupg
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install trivy -y
          trivy fs --format table -o fs-report.json .

      - name: Gitleaks Installation & code scan
        continue-on-error: true
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gitleaks
          gitleaks detect --source . -r gitleaks-report.json -f json
          
  run_test_cases:
    name: Test
    runs-on: ubuntu-latest
    needs: security_checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Test cases
        continue-on-error: true
        run: |
          pip install -r requirements.txt
          pip install pytest
          pytest tests/
          
  docker-build-push:
      name: Docker build, push
      runs-on: ubuntu-latest
      needs: run_test_cases
      steps:
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
           username: ${{ vars.DOCKERHUB_USERNAME }}
           password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Build image (but do NOT push yet)
          uses: docker/build-push-action@v6
          with:
            push: false
            tags: sowmya205/python-postgres:2
            outputs: type=docker,dest=/tmp/image.tar

        - name: Load image into Docker
          run: docker load -i /tmp/image.tar

        - name: Run Trivy vulnerability scanner
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: 'sowmya205/python-postgres:2'
            format: 'table'

        - name: Push image after successful scan
          uses: docker/build-push-action@v6
          with:
           push: true
           tags: sowmya205/python-postgres:2

  k8s-deployment:
    name: k8s Deployment
    runs-on: ubuntu-latest
    needs: docker-build-push

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: AWS Credentials to EKS cluster
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest
      - name: Configure kubeconfig
        run: |
           mkdir -p $HOME/.kube
           echo "${{ secrets.KUBE_CONFIG_DATA }}" > $HOME/.kube/config
      - name: Deploy to EKS
        run: |
           kubectl apply -f K8s/namespace.yaml
           # Wait for namespace to be fully created
           for i in {1..5}; do
             kubectl get ns flask-app && break || sleep 2
           done
           kubectl apply -f K8s/
